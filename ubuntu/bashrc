alias vgrind="valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all -v"
alias ll="ls -Alh --color=auto"

if [ -f "HOMESED/.bashrc-work" ]; then
    source HOMESED/.bashrc-work
fi


# Kitty overrides
if which kitty >/dev/null ; then
    alias ssh="kitty +kitten ssh"
fi

# Print nice header
ParseGitBranch() { git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'; }
ShortPwd() {
    case $PWD in
        $HOME) HPWD="~";;
        $HOME/*/*) HPWD="${PWD#"${PWD%/*/*}/"}";;
        $HOME/*) HPWD="~/${PWD##*/}";;
        /*/*/*) HPWD="${PWD#"${PWD%/*/*}/"}";;
        *) HPWD="$PWD";;
    esac; 
    echo $HPWD
}
GetPS() { # user + @hostname:path (gitbranch) $
    if [[ "$USER" == "root" ]]; then PS1="\e[31m\u\e[39m@"; else PS1="\e[37m\u\e[39m@"; fi
	PS1+='\[\033[34m\]$(hostname)\[\033[00m\]:\[\033[32m\]$(ShortPwd)\[\033[33m\]$(ParseGitBranch)\[\033[00m\] $ '; }
PROMPT_COMMAND='GetPS'

title() {
    PROMPT_COMMAND='echo -ne "\033]0;'$1'\007"'
}

# Ubuntu stuff
stty -ixon #ubuntu allows control-s and shit
alias gedit="gedit $a 2>&1 1>/dev/null"
alias nautilus="nautilus $a 2>/dev/null 1>/dev/null"

# Print nice message for sudo
sudo() {
    if ! (command sudo -n true 2>/dev/null); then echo "The Doors of Durin, Lord of Moria. Speak, friend, and enter."; fi
    command /usr/bin/sudo "$@"
}

# Extract most files
extract () {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.xz)    tar xf $1 ;;
             *.tar.bz2)   tar xjf $1        ;;
             *.tar.gz)    tar xzf $1     ;;
             *.bz2)       bunzip2 $1       ;;
             *.rar)       rar x $1     ;;
             *.gz)        gunzip $1     ;;
             *.tar)       tar xf $1        ;;
             *.tbz2)      tar xjf $1      ;;
             *.tgz)       tar xzf $1       ;;
             *.zip)       unzip $1     ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1    ;;
             *)           echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# Finds directory sizes and lists them for the current directory
dirsize () {
    if [ "$#" == 0 ]; then
        all="*"
    else
        all=$@
    fi
    du -skh $all | sort -n
}

viewmd() {
    pandoc $1 | lynx -stdin    
}

export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history
shopt -s histappend                      # append to history, don't overwrite it
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac
# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
